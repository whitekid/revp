// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: revp.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RevpClient is the client API for Revp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RevpClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (Revp_StreamClient, error)
}

type revpClient struct {
	cc grpc.ClientConnInterface
}

func NewRevpClient(cc grpc.ClientConnInterface) RevpClient {
	return &revpClient{cc}
}

func (c *revpClient) Stream(ctx context.Context, opts ...grpc.CallOption) (Revp_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Revp_ServiceDesc.Streams[0], "/revp.Revp/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &revpStreamClient{stream}
	return x, nil
}

type Revp_StreamClient interface {
	Send(*StreamData) error
	Recv() (*StreamData, error)
	grpc.ClientStream
}

type revpStreamClient struct {
	grpc.ClientStream
}

func (x *revpStreamClient) Send(m *StreamData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *revpStreamClient) Recv() (*StreamData, error) {
	m := new(StreamData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RevpServer is the server API for Revp service.
// All implementations must embed UnimplementedRevpServer
// for forward compatibility
type RevpServer interface {
	Stream(Revp_StreamServer) error
	mustEmbedUnimplementedRevpServer()
}

// UnimplementedRevpServer must be embedded to have forward compatible implementations.
type UnimplementedRevpServer struct {
}

func (UnimplementedRevpServer) Stream(Revp_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedRevpServer) mustEmbedUnimplementedRevpServer() {}

// UnsafeRevpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RevpServer will
// result in compilation errors.
type UnsafeRevpServer interface {
	mustEmbedUnimplementedRevpServer()
}

func RegisterRevpServer(s grpc.ServiceRegistrar, srv RevpServer) {
	s.RegisterService(&Revp_ServiceDesc, srv)
}

func _Revp_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RevpServer).Stream(&revpStreamServer{stream})
}

type Revp_StreamServer interface {
	Send(*StreamData) error
	Recv() (*StreamData, error)
	grpc.ServerStream
}

type revpStreamServer struct {
	grpc.ServerStream
}

func (x *revpStreamServer) Send(m *StreamData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *revpStreamServer) Recv() (*StreamData, error) {
	m := new(StreamData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Revp_ServiceDesc is the grpc.ServiceDesc for Revp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Revp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "revp.Revp",
	HandlerType: (*RevpServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Revp_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "revp.proto",
}

// StreamExampleClient is the client API for StreamExample service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamExampleClient interface {
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (StreamExample_ClientStreamClient, error)
	ServerStream(ctx context.Context, in *StreamReq, opts ...grpc.CallOption) (StreamExample_ServerStreamClient, error)
	BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (StreamExample_BidirectionalStreamClient, error)
}

type streamExampleClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamExampleClient(cc grpc.ClientConnInterface) StreamExampleClient {
	return &streamExampleClient{cc}
}

func (c *streamExampleClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (StreamExample_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamExample_ServiceDesc.Streams[0], "/revp.StreamExample/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamExampleClientStreamClient{stream}
	return x, nil
}

type StreamExample_ClientStreamClient interface {
	Send(*StreamExampleData) error
	CloseAndRecv() (*StreamExampleSummary, error)
	grpc.ClientStream
}

type streamExampleClientStreamClient struct {
	grpc.ClientStream
}

func (x *streamExampleClientStreamClient) Send(m *StreamExampleData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamExampleClientStreamClient) CloseAndRecv() (*StreamExampleSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamExampleSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamExampleClient) ServerStream(ctx context.Context, in *StreamReq, opts ...grpc.CallOption) (StreamExample_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamExample_ServiceDesc.Streams[1], "/revp.StreamExample/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamExampleServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamExample_ServerStreamClient interface {
	Recv() (*StreamExampleData, error)
	grpc.ClientStream
}

type streamExampleServerStreamClient struct {
	grpc.ClientStream
}

func (x *streamExampleServerStreamClient) Recv() (*StreamExampleData, error) {
	m := new(StreamExampleData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamExampleClient) BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (StreamExample_BidirectionalStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamExample_ServiceDesc.Streams[2], "/revp.StreamExample/BidirectionalStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamExampleBidirectionalStreamClient{stream}
	return x, nil
}

type StreamExample_BidirectionalStreamClient interface {
	Send(*StreamExampleData) error
	Recv() (*StreamExampleData, error)
	grpc.ClientStream
}

type streamExampleBidirectionalStreamClient struct {
	grpc.ClientStream
}

func (x *streamExampleBidirectionalStreamClient) Send(m *StreamExampleData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamExampleBidirectionalStreamClient) Recv() (*StreamExampleData, error) {
	m := new(StreamExampleData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamExampleServer is the server API for StreamExample service.
// All implementations must embed UnimplementedStreamExampleServer
// for forward compatibility
type StreamExampleServer interface {
	ClientStream(StreamExample_ClientStreamServer) error
	ServerStream(*StreamReq, StreamExample_ServerStreamServer) error
	BidirectionalStream(StreamExample_BidirectionalStreamServer) error
	mustEmbedUnimplementedStreamExampleServer()
}

// UnimplementedStreamExampleServer must be embedded to have forward compatible implementations.
type UnimplementedStreamExampleServer struct {
}

func (UnimplementedStreamExampleServer) ClientStream(StreamExample_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedStreamExampleServer) ServerStream(*StreamReq, StreamExample_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedStreamExampleServer) BidirectionalStream(StreamExample_BidirectionalStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStream not implemented")
}
func (UnimplementedStreamExampleServer) mustEmbedUnimplementedStreamExampleServer() {}

// UnsafeStreamExampleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamExampleServer will
// result in compilation errors.
type UnsafeStreamExampleServer interface {
	mustEmbedUnimplementedStreamExampleServer()
}

func RegisterStreamExampleServer(s grpc.ServiceRegistrar, srv StreamExampleServer) {
	s.RegisterService(&StreamExample_ServiceDesc, srv)
}

func _StreamExample_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamExampleServer).ClientStream(&streamExampleClientStreamServer{stream})
}

type StreamExample_ClientStreamServer interface {
	SendAndClose(*StreamExampleSummary) error
	Recv() (*StreamExampleData, error)
	grpc.ServerStream
}

type streamExampleClientStreamServer struct {
	grpc.ServerStream
}

func (x *streamExampleClientStreamServer) SendAndClose(m *StreamExampleSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamExampleClientStreamServer) Recv() (*StreamExampleData, error) {
	m := new(StreamExampleData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StreamExample_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamExampleServer).ServerStream(m, &streamExampleServerStreamServer{stream})
}

type StreamExample_ServerStreamServer interface {
	Send(*StreamExampleData) error
	grpc.ServerStream
}

type streamExampleServerStreamServer struct {
	grpc.ServerStream
}

func (x *streamExampleServerStreamServer) Send(m *StreamExampleData) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamExample_BidirectionalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamExampleServer).BidirectionalStream(&streamExampleBidirectionalStreamServer{stream})
}

type StreamExample_BidirectionalStreamServer interface {
	Send(*StreamExampleData) error
	Recv() (*StreamExampleData, error)
	grpc.ServerStream
}

type streamExampleBidirectionalStreamServer struct {
	grpc.ServerStream
}

func (x *streamExampleBidirectionalStreamServer) Send(m *StreamExampleData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamExampleBidirectionalStreamServer) Recv() (*StreamExampleData, error) {
	m := new(StreamExampleData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamExample_ServiceDesc is the grpc.ServiceDesc for StreamExample service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamExample_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "revp.StreamExample",
	HandlerType: (*StreamExampleServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStream",
			Handler:       _StreamExample_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStream",
			Handler:       _StreamExample_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BidirectionalStream",
			Handler:       _StreamExample_BidirectionalStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "revp.proto",
}

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/revp.Greeter/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/revp.Greeter/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "revp.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "revp.proto",
}
